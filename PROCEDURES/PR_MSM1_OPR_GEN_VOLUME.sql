--------------------------------------------------------
--  DDL for Procedure PR_MSM1_OPR_GEN_VOLUME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ASB_STG"."PR_MSM1_OPR_GEN_VOLUME" 
							(PI_LOAD_SEQ_NBR		IN NUMBER,
							 P_MEASR_COMP_TYPE_CD 	IN VARCHAR2
							)
AS 

 CURSOR cur_SPBMU  (v_asb_unit_code VARCHAR2) IS 
	select sbs.ASB_UNIT_CODE, sbs.SETT_DATE, sbs.SETT_PER, sbs.SETT_GMT_TIME, sbs.SETT_BST_TIME,
	die.d1_SP_ID, die.DEVICE_CONFIG_ID , dmc.MEASR_COMP_ID, MEASR_COMP_TYPE_CD, 
	FPN_VOLUME, BO_VOLUME, EXPECTED_VOLUME, METERED_VOLUME, IMBALANCE_VOLUME
	from SP_BMU_STG sbs, 
	cisadm.d1_sp_identifier@stg_msm_link dsi ,
	cisadm.d1_install_evt@stg_msm_link die ,
	cisadm.D1_MEASR_COMP@stg_msm_link dmc
	where dsi.ID_VALUE = sbs.ASB_UNIT_CODE 
	AND dsi.D1_SP_ID = die.D1_SP_ID 
	AND dsi.sp_id_type_flg = 'D1MI'
	AND dmc.device_config_id = die.device_config_id
	AND dmc.MEASR_COMP_TYPE_CD = P_MEASR_COMP_TYPE_CD
	AND sbs.LOAD_SEQ_NBR = PI_LOAD_SEQ_NBR
	AND sbs.ASB_UNIT_CODE = v_asb_unit_code
	;

	Type SPBMU_RECTYPE is Record 
	( 
	 ASB_UNIT_CODE			SP_BMU_STG.ASB_UNIT_CODE%type,
	 SETT_DATE				SP_BMU_STG.SETT_DATE%type,
	 SETT_PER	    		SP_BMU_STG.SETT_PER%type,
	 SETT_GMT_TIME			SP_BMU_STG.SETT_GMT_TIME%type,
	 SETT_BST_TIME  		SP_BMU_STG.SETT_BST_TIME%type,
	 d1_SP_ID				char(12),--cisadm.d1_install_evt@stg_msm_link.d1_SP_ID%type,
	 DEVICE_CONFIG_ID 		char(12),--cisadm.d1_install_evt@stg_msm_link.DEVICE_CONFIG_ID%type,
	 MEASR_COMP_ID			char(12),--cisadm.D1_MEASR_COMP@stg_msm_link.MEASR_COMP_ID%type,
	 MEASR_COMP_TYPE_CD		varchar2(30),--SP_BMU_STG.MEASR_COMP_TYPE_CD%type,
	 FPN_VOLUME				SP_BMU_STG.FPN_VOLUME%Type,
	 BO_VOLUME				SP_BMU_STG.BO_VOLUME%Type,
	 EXPECTED_VOLUME		SP_BMU_STG.EXPECTED_VOLUME%Type,
	 METERED_VOLUME			SP_BMU_STG.METERED_VOLUME%Type,
	 IMBALANCE_VOLUME		SP_BMU_STG.IMBALANCE_VOLUME%Type
	 );

     Type SPBMU_TABTYPE is table of SPBMU_RECTYPE
     INDEX BY BINARY_INTEGER;

	 SPBMU_TAB SPBMU_TABTYPE;	

    type t_sp_bmu_stg is table of sp_bmu_stg.asb_unit_code%type;
	lv_vc_unit_code t_sp_bmu_stg;

    v_ERROR VARCHAR2(1000);
    v_END_DATE DATE;

BEGIN

    select distinct asb_unit_code bulk collect into lv_vc_unit_code from sp_bmu_stg where LOAD_SEQ_NBR = PI_LOAD_SEQ_NBR;

    IF (P_MEASR_COMP_TYPE_CD = 'SPBMUEXPVOL') THEN

		 For i in 1..lv_vc_unit_code.count
		 Loop
			OPEN cur_SPBMU(lv_vc_unit_code(i));
				Loop 		
					Fetch cur_SPBMU BULK COLLECT Into SPBMU_TAB LIMIT 5000;
					Exit When SPBMU_TAB.Count=0;

					FORALL i in 1..SPBMU_TAB.Count
						INSERT INTO MSM_STG1.D1_MSRMT_EXPVOLUME(LOAD_SEQ_NBR, MEASR_COMP_ID, MSRMT_DTTM, BO_STATUS_CD, MSRMT_COND_FLG, MSRMT_USE_FLG, MSRMT_LOCAL_DTTM, MSRMT_VAL, ORIG_INIT_MSRMT_ID, PREV_MSRMT_DTTM, 
						MSRMT_VAL1, MSRMT_VAL2, MSRMT_VAL3, MSRMT_VAL4, MSRMT_VAL5, MSRMT_VAL6, MSRMT_VAL7, MSRMT_VAL8, MSRMT_VAL9, MSRMT_VAL10, BUS_OBJ_CD, CRE_DTTM, STATUS_UPD_DTTM, USER_EDITED_FLG, VERSION, 
						LAST_UPDATE_DTTM, READING_VAL, COMBINED_MULTIPLIER, READING_COND_FLG, DATE_CREATED)
						values
						(PI_LOAD_SEQ_NBR, SPBMU_TAB(i).MEASR_COMP_ID, SPBMU_TAB(i).SETT_GMT_TIME,'OK','501000',' ',SPBMU_TAB(i).SETT_BST_TIME
						,SPBMU_TAB(i).EXPECTED_VOLUME,P_MEASR_COMP_TYPE_CD , NULL,0,0,0,0,0,0,0,0,0,0,'D1-Measurement',SYSDATE,SYSDATE,' ',
						99, SYSDATE, NULL,1,NULL,SYSDATE
						);	
					Commit;		
				End Loop;

			Close cur_SPBMU;	
		 End Loop;

	End If;

	IF (P_MEASR_COMP_TYPE_CD = 'SPBMUMTRVOL') THEN

		 For i in 1..lv_vc_unit_code.count
		 Loop
			Open cur_SPBMU(lv_vc_unit_code(i));
				Loop 		
					Fetch cur_SPBMU BULK COLLECT Into SPBMU_TAB LIMIT 5000;
					Exit When SPBMU_TAB.Count=0;

					FORALL i in 1..SPBMU_TAB.Count
						INSERT INTO MSM_STG1.D1_MSRMT_MTRVOLUME(LOAD_SEQ_NBR, MEASR_COMP_ID, MSRMT_DTTM, BO_STATUS_CD, MSRMT_COND_FLG, MSRMT_USE_FLG, MSRMT_LOCAL_DTTM, MSRMT_VAL, ORIG_INIT_MSRMT_ID, PREV_MSRMT_DTTM, 
						MSRMT_VAL1, MSRMT_VAL2, MSRMT_VAL3, MSRMT_VAL4, MSRMT_VAL5, MSRMT_VAL6, MSRMT_VAL7, MSRMT_VAL8, MSRMT_VAL9, MSRMT_VAL10, BUS_OBJ_CD, CRE_DTTM, STATUS_UPD_DTTM, USER_EDITED_FLG, VERSION, 
						LAST_UPDATE_DTTM, READING_VAL, COMBINED_MULTIPLIER, READING_COND_FLG, DATE_CREATED)
						values
						(PI_LOAD_SEQ_NBR, SPBMU_TAB(i).MEASR_COMP_ID, SPBMU_TAB(i).SETT_GMT_TIME,'OK','501000',' ',SPBMU_TAB(i).SETT_BST_TIME,SPBMU_TAB(i).METERED_VOLUME,p_MEASR_COMP_TYPE_CD , NULL,0,0,0,0,0,0,0,0,0,0,'D1-Measurement',SYSDATE,SYSDATE,' ',
						99, SYSDATE, NULL,1,NULL,SYSDATE
						);	
					Commit;		
				End Loop;

			Close cur_SPBMU;	
		 End Loop;

	End If;

	IF (P_MEASR_COMP_TYPE_CD = 'BOVOLUME') THEN

		 For i in 1..lv_vc_unit_code.count
		 Loop
			Open cur_SPBMU(lv_vc_unit_code(i));
				Loop 		
					Fetch cur_SPBMU BULK COLLECT Into SPBMU_TAB LIMIT 5000;
					Exit When SPBMU_TAB.Count=0;

					FORALL i in 1..SPBMU_TAB.Count
						INSERT INTO MSM_STG1.D1_MSRMT_BOVOLUME(LOAD_SEQ_NBR, MEASR_COMP_ID, MSRMT_DTTM, BO_STATUS_CD, MSRMT_COND_FLG, MSRMT_USE_FLG, MSRMT_LOCAL_DTTM, MSRMT_VAL, ORIG_INIT_MSRMT_ID, PREV_MSRMT_DTTM, 
						MSRMT_VAL1, MSRMT_VAL2, MSRMT_VAL3, MSRMT_VAL4, MSRMT_VAL5, MSRMT_VAL6, MSRMT_VAL7, MSRMT_VAL8, MSRMT_VAL9, MSRMT_VAL10, BUS_OBJ_CD, CRE_DTTM, STATUS_UPD_DTTM, USER_EDITED_FLG, VERSION, 
						LAST_UPDATE_DTTM, READING_VAL, COMBINED_MULTIPLIER, READING_COND_FLG, DATE_CREATED)
						values
						(PI_LOAD_SEQ_NBR, SPBMU_TAB(i).MEASR_COMP_ID, SPBMU_TAB(i).SETT_GMT_TIME,'OK','501000',' ',SPBMU_TAB(i).SETT_BST_TIME,SPBMU_TAB(i).BO_VOLUME,p_MEASR_COMP_TYPE_CD , NULL,0,0,0,0,0,0,0,0,0,0,'D1-Measurement',SYSDATE,SYSDATE,' ',
						99, SYSDATE, NULL,1,NULL,SYSDATE
						);
					Commit;		
				End Loop;

			Close cur_SPBMU;	
		 End Loop;

	End If;


	IF (P_MEASR_COMP_TYPE_CD = 'FPNVOLUME') THEN

		 For i in 1..lv_vc_unit_code.count
		 Loop
			Open cur_SPBMU(lv_vc_unit_code(i));
				Loop 		
					Fetch cur_SPBMU BULK COLLECT Into SPBMU_TAB LIMIT 5000;
					Exit When SPBMU_TAB.Count=0;

					FORALL i in 1..SPBMU_TAB.Count
						INSERT INTO MSM_STG1.D1_MSRMT_FPNVOLUME(LOAD_SEQ_NBR, MEASR_COMP_ID, MSRMT_DTTM, BO_STATUS_CD, MSRMT_COND_FLG, MSRMT_USE_FLG, MSRMT_LOCAL_DTTM, MSRMT_VAL, ORIG_INIT_MSRMT_ID, PREV_MSRMT_DTTM, 
						MSRMT_VAL1, MSRMT_VAL2, MSRMT_VAL3, MSRMT_VAL4, MSRMT_VAL5, MSRMT_VAL6, MSRMT_VAL7, MSRMT_VAL8, MSRMT_VAL9, MSRMT_VAL10, BUS_OBJ_CD, CRE_DTTM, STATUS_UPD_DTTM, USER_EDITED_FLG, VERSION, 
						LAST_UPDATE_DTTM, READING_VAL, COMBINED_MULTIPLIER, READING_COND_FLG, DATE_CREATED)
						values
						(PI_LOAD_SEQ_NBR, SPBMU_TAB(i).MEASR_COMP_ID, SPBMU_TAB(i).SETT_GMT_TIME,'OK','501000',' ',SPBMU_TAB(i).SETT_BST_TIME,SPBMU_TAB(i).FPN_VOLUME,p_MEASR_COMP_TYPE_CD , NULL,0,0,0,0,0,0,0,0,0,0,'D1-Measurement',SYSDATE,SYSDATE,' ',
						99, SYSDATE, NULL,1,NULL,SYSDATE
						);
					Commit;		
				End Loop;

			Close cur_SPBMU;	
		 End Loop;

	End If;

	IF (P_MEASR_COMP_TYPE_CD = 'SPBMUIMBVOL') THEN

		 For i in 1..lv_vc_unit_code.count
		 Loop
			Open cur_SPBMU(lv_vc_unit_code(i));
				Loop 		
					Fetch cur_SPBMU BULK COLLECT Into SPBMU_TAB LIMIT 5000;
					Exit When SPBMU_TAB.Count=0;

					FORALL i in 1..SPBMU_TAB.Count
						INSERT INTO MSM_STG1.D1_MSRMT_IMBVOLUME(LOAD_SEQ_NBR, MEASR_COMP_ID, MSRMT_DTTM, BO_STATUS_CD, MSRMT_COND_FLG, MSRMT_USE_FLG, MSRMT_LOCAL_DTTM, MSRMT_VAL, ORIG_INIT_MSRMT_ID, PREV_MSRMT_DTTM, 
						MSRMT_VAL1, MSRMT_VAL2, MSRMT_VAL3, MSRMT_VAL4, MSRMT_VAL5, MSRMT_VAL6, MSRMT_VAL7, MSRMT_VAL8, MSRMT_VAL9, MSRMT_VAL10, BUS_OBJ_CD, CRE_DTTM, STATUS_UPD_DTTM, USER_EDITED_FLG, VERSION, 
						LAST_UPDATE_DTTM, READING_VAL, COMBINED_MULTIPLIER, READING_COND_FLG, DATE_CREATED)
						values
						(PI_LOAD_SEQ_NBR, SPBMU_TAB(i).MEASR_COMP_ID, SPBMU_TAB(i).SETT_GMT_TIME,'OK','501000',' ',SPBMU_TAB(i).SETT_BST_TIME,SPBMU_TAB(i).IMBALANCE_VOLUME,p_MEASR_COMP_TYPE_CD , NULL,0,0,0,0,0,0,0,0,0,0,'D1-Measurement',SYSDATE,SYSDATE,' ',
						99, SYSDATE, NULL,1,NULL,SYSDATE
						);
					Commit;		
				End Loop;

			Close cur_SPBMU;	
		 End Loop;

	End If;

    EXCEPTION
      WHEN OTHERS THEN
      ROLLBACK;
        v_ERROR:=SQLCODE||' '||SUBSTR(sqlerrm,1,400);
        PROC_PROCESS_LOG('PR_MSM1_OPR_GEN_VOLUME - ' || p_MEASR_COMP_TYPE_CD ,pi_LOAD_SEQ_NBR,'FAILURE',v_ERROR,P_MEASR_COMP_TYPE_CD);
        DBMS_OUTPUT.PUT_LINE('Error --> '||SQLERRM);


END PR_MSM1_OPR_GEN_VOLUME;

/

