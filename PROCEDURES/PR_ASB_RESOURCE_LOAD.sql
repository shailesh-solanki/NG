--------------------------------------------------------
--  DDL for Procedure PR_ASB_RESOURCE_LOAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "ASB_STG"."PR_ASB_RESOURCE_LOAD" 
/**************************************************************************************
*
* Program Name           :PR_ASB_RESOURCE_LOAD
* Author                 :IBM(Shailesh Solanki)
* Creation Date          :24-03-2021
* Description            :This is a PL/SQL procedure. This procedure takes data from ASB_UNIT, 
*                         and SRS_MONITORING and SRS_HEADROOM_METER data from ASB legacy system 
*                         and loads into ASB_UNIT_STG, SRS_MONITORING_STG adn SRS_HEADROMM_METER_STG tables respectively.
*
* Calling Program        :None
*
**************************************************************************************/
(pi_load_seq_nbr IN NUMBER)
AS
BEGIN
  
  MERGE INTO ASB_UNIT_STG A
        USING (SELECT ASB_UNIT_CODE, EFFECTIVE, GOAL_UNIT_CODE, BM_UNIT_CODE, REG_STATION_NAME FROM ASB_UNIT) q
        ON (q.ASB_UNIT_CODE = A.ASB_UNIT_CODE) 
    WHEN MATCHED THEN
        UPDATE SET LOAD_SEQ_NBR = pi_load_seq_nbr, EFFECTIVE = q.EFFECTIVE, GOAL_UNIT_CODE = q.GOAL_UNIT_CODE, BM_UNIT_CODE = q.BM_UNIT_CODE, REG_STATION_NAME = q.REG_STATION_NAME, DATE_CREATED = SYSDATE
        where (nvl(A.BM_UNIT_CODE,'checknull') <> nvl(q.BM_UNIT_CODE,'checknull')) or (nvl(A.REG_STATION_NAME,'checknull') <> nvl(q.REG_STATION_NAME,'checknull')) 
        or A.GOAL_UNIT_CODE <> q.GOAL_UNIT_CODE or A.EFFECTIVE <> q.EFFECTIVE
    WHEN NOT MATCHED THEN
        INSERT (LOAD_SEQ_NBR,ASB_UNIT_CODE, EFFECTIVE, GOAL_UNIT_CODE, BM_UNIT_CODE, REG_STATION_NAME,DATE_CREATED) 
        VALUES(pi_load_seq_nbr, q.ASB_UNIT_CODE, q.EFFECTIVE, q.GOAL_UNIT_CODE, q.BM_UNIT_CODE, q.REG_STATION_NAME, SYSDATE);
        
   MERGE INTO SRS_MONITORING_STG A
        USING (SELECT ASB_UNIT_CODE, EFFECTIVE, BAD_METER_FLAG, METER_DELAY, NEGATIVE_LOAD, BASE_LOAD_LEAD, BASE_LOAD_LAG, BASE_LOAD_SUM FROM SRS_MONITORING) q
        ON (q.ASB_UNIT_CODE = A.ASB_UNIT_CODE and q.EFFECTIVE = A.EFFECTIVE) 
    WHEN MATCHED THEN
        UPDATE SET LOAD_SEQ_NBR = pi_load_seq_nbr, BAD_METER_FLAG = q.BAD_METER_FLAG, METER_DELAY = q.METER_DELAY, NEGATIVE_LOAD = q.NEGATIVE_LOAD, BASE_LOAD_LEAD = q.BASE_LOAD_LEAD, BASE_LOAD_LAG = q.BASE_LOAD_LAG , BASE_LOAD_SUM = q.BASE_LOAD_SUM, DATE_CREATED = SYSDATE
        where A.EFFECTIVE <> q.EFFECTIVE or A.BAD_METER_FLAG <> q.BAD_METER_FLAG or A.METER_DELAY <> q.METER_DELAY or A.NEGATIVE_LOAD <> q.NEGATIVE_LOAD or A.BASE_LOAD_LEAD <> q.BASE_LOAD_LEAD  or A.BASE_LOAD_LAG <> q.BASE_LOAD_LAG or A.BASE_LOAD_SUM <> q.BASE_LOAD_SUM
    WHEN NOT MATCHED THEN
        INSERT (LOAD_SEQ_NBR,ASB_UNIT_CODE, EFFECTIVE, BAD_METER_FLAG, METER_DELAY, NEGATIVE_LOAD, BASE_LOAD_LEAD, BASE_LOAD_LAG, BASE_LOAD_SUM,DATE_CREATED) 
        VALUES(pi_load_seq_nbr, q.ASB_UNIT_CODE, q.EFFECTIVE, q.BAD_METER_FLAG, q.METER_DELAY, q.NEGATIVE_LOAD, q.BASE_LOAD_LEAD, q.BASE_LOAD_LAG, q.BASE_LOAD_SUM,SYSDATE);
        
    MERGE INTO SRS_HEADROOM_METER_STG A
        USING (SELECT ASB_UNIT_CODE, EFFECTIVE_FROM, EFFECTIVE_TO, AVAIL_METER, AVAIL_HEADROOM, UTIL_METER, UTIL_HEADROOM FROM SRS_HEADROOM_METER) q
        ON (q.ASB_UNIT_CODE = A.ASB_UNIT_CODE and q.EFFECTIVE_FROM = A.EFFECTIVE_FROM AND q.EFFECTIVE_TO = A.EFFECTIVE_TO) 
    WHEN MATCHED THEN
        UPDATE SET LOAD_SEQ_NBR = pi_load_seq_nbr, AVAIL_METER = q.AVAIL_METER, AVAIL_HEADROOM =  q.AVAIL_HEADROOM, UTIL_METER = q.UTIL_METER, UTIL_HEADROOM = q.UTIL_HEADROOM ,DATE_CREATED = SYSDATE
        where A.AVAIL_METER <> q.AVAIL_METER or A.AVAIL_HEADROOM <> q.AVAIL_HEADROOM or A.UTIL_METER <> q.UTIL_METER or A.UTIL_HEADROOM <> q.UTIL_HEADROOM
    WHEN NOT MATCHED THEN
        INSERT (LOAD_SEQ_NBR,ASB_UNIT_CODE, EFFECTIVE_FROM, EFFECTIVE_TO, AVAIL_METER, AVAIL_HEADROOM, UTIL_METER, UTIL_HEADROOM,DATE_CREATED) 
        VALUES(pi_load_seq_nbr, q.ASB_UNIT_CODE, q.EFFECTIVE_FROM, q.EFFECTIVE_TO, q.AVAIL_METER, q.AVAIL_HEADROOM, q.UTIL_METER, q.UTIL_HEADROOM, SYSDATE);
     
     ASB_STG.PROC_PROCESS_LOG('PR_RESOURCE_DATA_TRANS',pi_load_seq_nbr,'SUCCESS', 'Resource data migrated successfully from ASB legacy system to ASB_STG schema','RESOURCE');

EXCEPTION
   WHEN OTHERS then
        ROLLBACK;
        ASB_STG.PROC_PROCESS_LOG('PR_RESOURCE_DATA_TRANS',pi_load_seq_nbr,'FAILURE', 'Failed while migrating resource data from ASB legacy system to ASB_STG schema','RESOURCE');
        RAISE;
END;

/
